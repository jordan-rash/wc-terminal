// This file is @generated by wasmcloud/weld-codegen 0.4.6.
// It is not intended for manual editing.
// namespace: org.jordanrash.naryfs

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Command {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
}

// Encode Command as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_command<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Command,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.name.as_ref() {
        e.str("name")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.usage.as_ref() {
        e.str("usage")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode Command from cbor input stream
#[doc(hidden)]
pub fn decode_command(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Command, RpcError> {
    let __result = {
        let mut name: Option<Option<String>> = Some(None);
        let mut usage: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Command, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        name = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => {
                        usage = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "name" => {
                        name = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "usage" => {
                        usage = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        Command {
            name: name.unwrap(),
            usage: usage.unwrap(),
        }
    };
    Ok(__result)
}
pub type Commands = Vec<Command>;

// Encode Commands as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_commands<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Commands,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        encode_command(e, item)?;
    }
    Ok(())
}

// Decode Commands from cbor input stream
#[doc(hidden)]
pub fn decode_commands(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Commands, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<Command> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(
                    decode_command(d)
                        .map_err(|e| format!("decoding 'org.jordanrash.naryfs#Command': {}", e))?,
                )
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<Command> = Vec::new();
            loop {
                match d.datatype() {
                    Err(_) => break,
                    Ok(wasmbus_rpc::cbor::Type::Break) => break,
                    Ok(_) => {
                        arr.push(decode_command(d).map_err(|e| {
                            format!("decoding 'org.jordanrash.naryfs#Command': {}", e)
                        })?)
                    }
                }
            }
            arr
        }
    };
    Ok(__result)
}
pub type Error = String;

// Encode Error as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_error<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Error,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.str(val)?;
    Ok(())
}

// Decode Error from cbor input stream
#[doc(hidden)]
pub fn decode_error(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Error, RpcError> {
    let __result = { d.str()?.to_string() };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct FsMsg {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fsname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<Payload>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub session: Option<String>,
}

// Encode FsMsg as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_fs_msg<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &FsMsg,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.action.as_ref() {
        e.str("action")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.fsname.as_ref() {
        e.str("fsname")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.payload.as_ref() {
        e.str("payload")?;
        encode_payload(e, val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.session.as_ref() {
        e.str("session")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode FsMsg from cbor input stream
#[doc(hidden)]
pub fn decode_fs_msg(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<FsMsg, RpcError> {
    let __result = {
        let mut action: Option<Option<String>> = Some(None);
        let mut fsname: Option<Option<String>> = Some(None);
        let mut payload: Option<Option<Payload>> = Some(None);
        let mut session: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct FsMsg, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        action = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => {
                        fsname = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => {
                        payload = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_payload(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Payload': {}", e)
                            })?))
                        }
                    }
                    3 => {
                        session = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "action" => {
                        action = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "fsname" => {
                        fsname = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "payload" => {
                        payload = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_payload(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Payload': {}", e)
                            })?))
                        }
                    }
                    "session" => {
                        session = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        FsMsg {
            action: action.unwrap(),
            fsname: fsname.unwrap(),
            payload: payload.unwrap(),
            session: session.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct HandlerFsResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abspath: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub currnodeid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode HandlerFsResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_handler_fs_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &HandlerFsResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    if let Some(val) = val.abspath.as_ref() {
        e.str("abspath")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.currnodeid.as_ref() {
        e.str("currnodeid")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.error.as_ref() {
        e.str("error")?;
        encode_error(e, val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.response.as_ref() {
        e.str("response")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode HandlerFsResponse from cbor input stream
#[doc(hidden)]
pub fn decode_handler_fs_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<HandlerFsResponse, RpcError> {
    let __result = {
        let mut abspath: Option<Option<String>> = Some(None);
        let mut currnodeid: Option<Option<String>> = Some(None);
        let mut error: Option<Option<Error>> = Some(None);
        let mut response: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct HandlerFsResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        abspath = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => {
                        currnodeid = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_error(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Error': {}", e)
                            })?))
                        }
                    }
                    3 => {
                        response = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    4 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "abspath" => {
                        abspath = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "currnodeid" => {
                        currnodeid = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_error(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Error': {}", e)
                            })?))
                        }
                    }
                    "response" => {
                        response = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        HandlerFsResponse {
            abspath: abspath.unwrap(),
            currnodeid: currnodeid.unwrap(),
            error: error.unwrap(),
            response: response.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field HandlerFsResponse.success (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct HandlerFsStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Commands>,
}

// Encode HandlerFsStatus as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_handler_fs_status<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &HandlerFsStatus,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.commands.as_ref() {
        e.str("commands")?;
        encode_commands(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode HandlerFsStatus from cbor input stream
#[doc(hidden)]
pub fn decode_handler_fs_status(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<HandlerFsStatus, RpcError> {
    let __result = {
        let mut commands: Option<Option<Commands>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct HandlerFsStatus, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        commands = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_commands(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Commands': {}", e)
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "commands" => {
                        commands = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_commands(d).map_err(|e| {
                                format!("decoding 'org.jordanrash.naryfs#Commands': {}", e)
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        HandlerFsStatus {
            commands: commands.unwrap(),
        }
    };
    Ok(__result)
}
pub type NodeType = String;

// Encode NodeType as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_node_type<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &NodeType,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.str(val)?;
    Ok(())
}

// Decode NodeType from cbor input stream
#[doc(hidden)]
pub fn decode_node_type(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<NodeType, RpcError> {
    let __result = { d.str()?.to_string() };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Payload {
    #[serde(rename = "eventNodeKey")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event_node_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodeid: Option<String>,
}

// Encode Payload as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_payload<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Payload,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.event_node_key.as_ref() {
        e.str("eventNodeKey")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.nodeid.as_ref() {
        e.str("nodeid")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode Payload from cbor input stream
#[doc(hidden)]
pub fn decode_payload(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Payload, RpcError> {
    let __result = {
        let mut event_node_key: Option<Option<String>> = Some(None);
        let mut nodeid: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Payload, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        event_node_key = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => {
                        nodeid = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "eventNodeKey" => {
                        event_node_key = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "nodeid" => {
                        nodeid = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        Payload {
            event_node_key: event_node_key.unwrap(),
            nodeid: nodeid.unwrap(),
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: jordanrash:terminal:fs
/// wasmbus.actorReceive
#[async_trait]
pub trait FsSubscriber {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "jordanrash:terminal:fs"
    }
    async fn handle_fs_message(&self, ctx: &Context, arg: &FsMsg) -> RpcResult<HandlerFsResponse>;
    async fn handle_fs_status(&self, ctx: &Context) -> RpcResult<HandlerFsStatus>;
}

/// FsSubscriberReceiver receives messages defined in the FsSubscriber service trait
#[doc(hidden)]
#[async_trait]
pub trait FsSubscriberReceiver: MessageDispatch + FsSubscriber {
    async fn dispatch<'disp__, 'ctx__, 'msg__>(
        &'disp__ self,
        ctx: &'ctx__ Context,
        message: &Message<'msg__>,
    ) -> Result<Message<'msg__>, RpcError> {
        match message.method {
            "HandleFsMessage" => {
                let value: FsMsg = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'FsMsg': {}", e)))?;

                let resp = FsSubscriber::handle_fs_message(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(Message {
                    method: "FsSubscriber.HandleFsMessage",
                    arg: Cow::Owned(buf),
                })
            }
            "HandleFsStatus" => {
                let resp = FsSubscriber::handle_fs_status(self, ctx).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(Message {
                    method: "FsSubscriber.HandleFsStatus",
                    arg: Cow::Owned(buf),
                })
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "FsSubscriber::{}",
                message.method
            ))),
        }
    }
}

/// FsSubscriberSender sends messages to a FsSubscriber service
/// client for sending FsSubscriber messages
#[derive(Debug)]
pub struct FsSubscriberSender<T: Transport> {
    transport: T,
}

impl<T: Transport> FsSubscriberSender<T> {
    /// Constructs a FsSubscriberSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> FsSubscriberSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl FsSubscriberSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> FsSubscriber for FsSubscriberSender<T> {
    #[allow(unused)]
    async fn handle_fs_message(&self, ctx: &Context, arg: &FsMsg) -> RpcResult<HandlerFsResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "FsSubscriber.HandleFsMessage",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: HandlerFsResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': HandlerFsResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn handle_fs_status(&self, ctx: &Context) -> RpcResult<HandlerFsStatus> {
        let buf = *b"";
        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "FsSubscriber.HandleFsStatus",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: HandlerFsStatus = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': HandlerFsStatus", e)))?;
        Ok(value)
    }
}
